{
  "hash": "3fa6a2f7a9ee004a43fe391d43b43fcd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 2: Spatial Analysis and Visualization\"\nsubtitle: \"Healthcare Access and Equity in Pennsylvania\"\nauthor: \"Zicheng Xiang\"\ndate: \"2025.10.13\"\nformat:\n  html:\n    code-fold: true\n    toc: true\n    toc-location: left\n    theme: cosmo\n    embed-resources: true\nexecute:\n  warning: false\n  message: false\n---\n\n\n## Part 1: Healthcare Access for Vulnerable Populations\n\n#### Step 1: Data Collection (5 points)\n\n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n#  - Step 1: Packages & global params  -\nrequired_pkgs <- c(\n  \"tidyverse\",\"sf\",\"tigris\",\"tidycensus\",\"units\",\"nngeo\",\n  \"ggplot2\",\"scales\",\"janitor\",\"glue\",\"patchwork\",\"osmdata\"\n)\nfor (p in required_pkgs) {\n  if (!requireNamespace(p, quietly = TRUE)) install.packages(p)\n  library(p, character.only = TRUE)\n}\noptions(tigris_use_cache = TRUE, tigris_class = \"sf\")\n\n#  - define BEFORE any use  -\nstate_abbr <- \"PA\"\nstate_name <- \"Pennsylvania\"\nyear_acs   <- 2022\nsurvey     <- \"acs5\"\n\n\n# tidycensus::census_api_key(\"YOUR_KEY_HERE\", install = TRUE, overwrite = TRUE)\n\n#  - geometries (use EPSG:5070 for distance in meters)  -\ncounties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>\n  sf::st_as_sf() |> sf::st_transform(5070)\n\ntracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>\n  sf::st_as_sf() |> sf::st_transform(5070)\n\n#  - hospitals from OSM within PA bbox  -\npa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()\nq <- opq(bbox = c(pa_bbox[\"xmin\"], pa_bbox[\"ymin\"], pa_bbox[\"xmax\"], pa_bbox[\"ymax\"])) |>\n  add_osm_feature(key = \"amenity\", value = \"hospital\")\nosm_h <- osmdata_sf(q)\n\nhospitals <- osm_h$osm_points |>\n  sf::st_transform(5070) |>\n  sf::st_intersection(sf::st_union(counties)) |>\n  dplyr::mutate(name = dplyr::coalesce(name, \"Unknown hospital\")) |>\n  dplyr::distinct(geometry, .keep_all = TRUE)\n\n\n#  - quick checks / answers scaffolding  -\ncat(\"Loaded packages:\\n\"); print(search())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLoaded packages:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \".GlobalEnv\"         \"package:osmdata\"    \"package:patchwork\" \n [4] \"package:glue\"       \"package:janitor\"    \"package:scales\"    \n [7] \"package:nngeo\"      \"package:units\"      \"package:tidycensus\"\n[10] \"package:tigris\"     \"package:sf\"         \"package:lubridate\" \n[13] \"package:forcats\"    \"package:stringr\"    \"package:dplyr\"     \n[16] \"package:purrr\"      \"package:readr\"      \"package:tidyr\"     \n[19] \"package:tibble\"     \"package:ggplot2\"    \"package:tidyverse\" \n[22] \"package:stats\"      \"package:graphics\"   \"package:grDevices\" \n[25] \"package:utils\"      \"package:datasets\"   \"package:methods\"   \n[28] \"Autoloads\"          \"package:base\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nTigris options:\\n\"); print(options()$tigris_use_cache); print(options()$tigris_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTigris options:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#cat(\"\\nPreview counties geom types:\\n\")\n#print(counties |> sf::st_geometry_type() |> table())\n\nplot(sf::st_geometry(counties), main = \"Pennsylvania Counties (Check)\")\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# counts\nn_hosp   <- nrow(hospitals)\nn_tracts <- nrow(tracts)\n\n# CRS report\ncrs_counties <- sf::st_crs(counties)$input\ncrs_tracts   <- sf::st_crs(tracts)$input\ncrs_hosp     <- sf::st_crs(hospitals)$input\n\nglue::glue(\"\nStep 1 — Answers\n- Hospitals in dataset: {n_hosp}\n- Census tracts: {n_tracts}\n- CRS (counties): {crs_counties}\n- CRS (tracts):   {crs_tracts}\n- CRS (hospitals): {crs_hosp}\n\") |> cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStep 1 — Answers\n- Hospitals in dataset: 5645\n- Census tracts: 3445\n- CRS (counties): EPSG:5070\n- CRS (tracts):   EPSG:5070\n- CRS (hospitals): EPSG:5070\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- How many hospitals are in your dataset? 5644\n- How many census tracts? 3445 \n- What coordinate reference system is each dataset in? CRS (counties): EPSG:5070;CRS (tracts): EPSG:5070;CRS (hospitals): EPSG:5070\n\n \n\n#### Step 2: Get Demographic Data \n\nUse `tidycensus` to download tract-level demographic data for Pennsylvania.\n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get demographic data from ACS\nvars <- c(\n  median_income = \"B19013_001\",\n  pop_total     = \"B01003_001\",\n  # 65+\n  male_65_66    = \"B01001_020\",\n  male_67_69    = \"B01001_021\",\n  female_65_66  = \"B01001_044\",\n  female_67_69  = \"B01001_045\",\n  # poverty\n  pov_universe  = \"B17001_001\",\n  pov_below     = \"B17001_002\",\n  # no vehicle (owner & renter occupied HHs)\n  nov_owner     = \"B25044_003\",\n  nov_renter    = \"B25044_010\"\n)\n\n# \ntract_acs <- get_acs(\n  geography = \"tract\",\n  state = state_abbr,\n  variables = vars,\n  year = year_acs,\n  survey = survey,\n  geometry = FALSE,\n  cache_table = TRUE,\n  output = \"wide\"\n)\n\n\n\n# Join to tract boundaries\n# \ntract_attr <- tract_acs %>%\n  dplyr::transmute(\n    GEOID,\n    median_income = median_incomeE,\n    pop_total     = pop_totalE,\n    age65         = male_65_66E + male_67_69E + female_65_66E + female_67_69E,\n    pov_rate      = ifelse(pov_universeE > 0, pov_belowE / pov_universeE, NA_real_),\n    nov_hh        = nov_ownerE + nov_renterE\n  )\n\n# \ntracts_attr <- tracts %>%\n  dplyr::left_join(tract_attr, by = \"GEOID\")\n\n#  - Step 2 answers  -\nsum(is.na(tracts_attr$median_income))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(tracts_attr$median_income, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 70188\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- What year of ACS data are you using? 2022 (5-Year Estimates)\n- How many tracts have missing income data? 62\n- What is the median income across all PA census tracts? 70188 \n\n \n\n#### Step 3: Define Vulnerable Populations \n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for vulnerable tracts based on your criteria\ntracts_attr <- tracts_attr %>%\n  mutate(\n    share65       = ifelse(pop_total > 0, age65 / pop_total, NA_real_),\n    nov_percapita = ifelse(pop_total > 0, nov_hh / pop_total, NA_real_),\n    inc_rev       = -median_income,             # reverse: lower income => higher vulnerability\n    z_income      = scale(inc_rev)[,1],\n    z_poverty     = scale(pov_rate)[,1],\n    z_65          = scale(share65)[,1],\n    z_noveh       = scale(nov_percapita)[,1],\n    vuln_index    = rowMeans(cbind(z_income, z_poverty, z_65, z_noveh), na.rm = TRUE)\n  )\n\nsum(tracts_attr$median_income < 70000 & tracts_attr$share65 > 0.20, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- What income threshold did you choose and why? I defined “low income” as census tracts with median household income below the state median for Pennsylvania.According to the 2022 ACS 5-year data, Pennsylvania’s median household income is around $70,000.Tracts with median_income < $70,000 are therefore considered economically vulnerable.This threshold aligns with the state-wide benchmark and is commonly used in equity analyses to identify below-median income areas.\n- What elderly population threshold did you choose and why? I defined “significant elderly population” as tracts where the share of residents aged 65 and older exceeds 20% of the total population.The statewide average share of population aged 65+ is about 18% (ACS 2022), so a 20% cutoff identifies areas with noticeably higher-than-average elderly concentration.This threshold captures tracts where aging demographics may increase healthcare access challenges.\n- How many tracts meet your vulnerability criteria? Based on these two criteria (median_income < 70000 and share65 > 0.20), about 620 tracts across Pennsylvania meet both thresholds.\n- What percentage of PA census tracts are considered vulnerable by your definition? About 18% of tracts are considered vulnerable under the combined low-income and elderly criteria.\n\n \n\n#### Step 4: Calculate Distance to Hospitals \n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform to appropriate projected CRS\n\npa_bbox <- st_transform(counties, 4326) %>% st_bbox()\n\nq <- opq(bbox = c(pa_bbox[\"xmin\"], pa_bbox[\"ymin\"], pa_bbox[\"xmax\"], pa_bbox[\"ymax\"])) %>%\n  add_osm_feature(key = \"amenity\", value = \"hospital\")\n\nosm_h <- osmdata_sf(q)\n\nhospitals <- osm_h$osm_points %>%\n  st_transform(5070) %>%\n  st_intersection(st_union(counties)) %>%\n  mutate(name = coalesce(name, \"Unknown hospital\")) %>%\n  distinct(geometry, .keep_all = TRUE)\n\nglue(\"Hospitals found (points): {nrow(hospitals)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHospitals found (points): 5645\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate distance from each tract centroid to nearest hospital\n# Centroids (use within for compact tracts; for complex shapes you may consider population-weighted centroids)\ntract_cent <- st_point_on_surface(tracts_attr)\n\n# Nearest neighbor (index + distance)\nnn <- nngeo::st_nn(tract_cent, hospitals, k = 1, returnDist = TRUE)\n\n# Distances are in meters because EPSG:5070 is projected in meters\ndist_m <- sapply(nn$dist, function(x) ifelse(length(x)==0, NA_real_, x[1]))\n\ntracts_attr <- tracts_attr %>%\n  mutate(\n    dist_hosp_m = dist_m,\n    dist_hosp_km = set_units(dist_hosp_m, \"m\") %>% set_units(\"km\") %>% drop_units()\n  )\nsummary(tracts_attr$dist_hosp_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n 0.008897  1.606437  3.458952  5.927223  8.169082 51.890854 \n```\n\n\n:::\n\n```{.r .cell-code}\nsum(tracts_attr$dist_hosp_km > 24.1, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 69\n```\n\n\n:::\n:::\n\n\n\n**Questions to answer:**\n- What is the average distance to the nearest hospital for vulnerable tracts? 5.927666\n- What is the maximum distance? 51.890854\n- How many vulnerable tracts are more than 15 miles from the nearest hospital? 69\n\n \n\n#### Step 5: Identify Underserved Areas \n\n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create underserved variable\n\n#   thresholds (data-driven; adjust if you prefer fixed cutoffs)  \nincome_threshold   <- quantile(tracts_attr$median_income, 0.25, na.rm = TRUE)  # bottom 25% income\nelderly_threshold  <- quantile(tracts_attr$share65,       0.75, na.rm = TRUE)  # top 25% 65+ share\nfifteen_miles_km   <- units::set_units(15, \"mi\") |> units::set_units(\"km\") |> units::drop_units()\n\n#   flags: vulnerable & underserved  \ntracts_attr <- tracts_attr %>%\n  mutate(\n    vulnerable  = (median_income < income_threshold) & (share65 > elderly_threshold),\n    underserved = vulnerable & (dist_hosp_km > fifteen_miles_km)\n  )\n\n# (optional) quick summary\nglue::glue(\"\nVulnerable tracts: {sum(tracts_attr$vulnerable,  na.rm = TRUE)}\nUnderserved tracts (>15 miles): {sum(tracts_attr$underserved, na.rm = TRUE)}\nShare underserved: {round(100 * mean(tracts_attr$underserved, na.rm = TRUE), 1)}%\n\") |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nVulnerable tracts: 150\nUnderserved tracts (>15 miles): 7\nShare underserved: 0.2%\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- How many tracts are underserved? 7\n- What percentage of vulnerable tracts are underserved? 0.2%\n- Does this surprise you? Why or why not? I’m not surprised, because vulnerable populations in Pennsylvania are concentrated in rural areas where healthcare facilities are sparse and travel distances are naturally longer.\n\n \n\n#### Step 6: Aggregate to County Level\n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial join tracts to counties\nsafe_wmean <- function(x, w) {\n  x <- as.numeric(x)\n  w <- as.numeric(w)\n  idx <- is.finite(x) & is.finite(w) & w > 0\n  if (!any(idx)) return(NA_real_)\n  stats::weighted.mean(x[idx], w[idx])\n}\n\n# CRS\ncounties <- sf::st_transform(counties, sf::st_crs(tracts_attr))\n\n# county_name\ncnty_keep <- counties %>%\n  dplyr::select(COUNTYFP, county_name = NAME)\n\n# tract ∈ county\ntracts_in_cnty <- sf::st_join(\n  tracts_attr,\n  cnty_keep,\n  join = sf::st_within,\n  left = TRUE\n)\n\n# numeric\ntracts_in_cnty_num <- tracts_in_cnty %>%\n  dplyr::mutate(\n    pop_total     = as.numeric(pop_total),\n    median_income = as.numeric(median_income),\n    pov_rate      = as.numeric(pov_rate),\n    share65       = as.numeric(share65),\n    nov_percapita = as.numeric(nov_percapita),\n    vuln_index    = as.numeric(vuln_index),\n    dist_hosp_km  = as.numeric(dist_hosp_km)\n  )\n\n# Aggregate statistics by county\nsafe_wmean <- function(x, w) {\n  x <- as.numeric(x); w <- as.numeric(w)\n  idx <- is.finite(x) & is.finite(w) & w > 0\n  if (!any(idx)) return(NA_real_)\n  stats::weighted.mean(x[idx], w[idx])\n}\n\ncounty_stats <- tracts_in_cnty_num %>%\n  sf::st_drop_geometry() %>%\n  dplyr::group_by(county_name) %>%\n  dplyr::summarise(\n    n_tracts          = dplyr::n(),\n\n    median_income_wt  = safe_wmean(.data$median_income, .data$pop_total),\n    pov_rate_wt       = safe_wmean(.data$pov_rate,      .data$pop_total),\n    share65_wt        = safe_wmean(.data$share65,       .data$pop_total),\n    nov_percapita_wt  = safe_wmean(.data$nov_percapita, .data$pop_total),\n    vuln_index_wt     = safe_wmean(.data$vuln_index,    .data$pop_total),\n\n    pop_total_sum     = sum(.data$pop_total, na.rm = TRUE),\n\n    min_dist_hosp_km  = suppressWarnings(min(.data$dist_hosp_km, na.rm = TRUE)),\n    .groups = \"drop\"\n  )\n\n# \ncounty_map <- counties %>%\n  dplyr::left_join(county_stats, by = c(\"NAME\" = \"county_name\"))\n\n#  - Step 6 answers  -\n\ncounty_underserved <- tracts_in_cnty_num %>%\n  sf::st_drop_geometry() %>%\n  group_by(county_name) %>%\n  summarise(\n    n_tracts = n(),\n    n_vulnerable = sum(vulnerable, na.rm = TRUE),\n    n_underserved = sum(underserved, na.rm = TRUE),\n    pct_underserved = 100 * n_underserved / n_tracts,\n    vulnerable_pop_far = sum(pop_total[vulnerable & dist_hosp_km > 24.14], na.rm = TRUE) # >15 miles\n  ) %>%\n  arrange(desc(pct_underserved))\n\n# Top 5 counties by % underserved vulnerable tracts\ntop5_pct <- county_underserved %>%\n  arrange(desc(pct_underserved)) %>%\n  slice_head(n = 5) %>%\n  select(County = county_name,\n         `Underserved Tracts (%)` = pct_underserved,\n         `Vulnerable Tracts` = n_vulnerable,\n         `Underserved Tracts` = n_underserved)\n\n#  Top 5 counties by total vulnerable people far from hospitals\ntop5_pop <- county_underserved %>%\n  arrange(desc(vulnerable_pop_far)) %>%\n  slice_head(n = 5) %>%\n  select(County = county_name,\n         `Vulnerable Pop >15mi` = vulnerable_pop_far,\n         `Underserved Tracts` = n_underserved,\n         `Pct Underserved (%)` = pct_underserved)\n\n\nglue::glue(\"Top 5 counties by percentage of underserved vulnerable tracts:\") |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTop 5 counties by percentage of underserved vulnerable tracts:\n```\n\n\n:::\n\n```{.r .cell-code}\ntop5_pct %>% knitr::kable(digits = 1, caption = \"Counties with Highest % of Underserved Vulnerable Tracts\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Counties with Highest % of Underserved Vulnerable Tracts\n\n|County   | Underserved Tracts (%)| Vulnerable Tracts| Underserved Tracts|\n|:--------|----------------------:|-----------------:|------------------:|\n|Forest   |                   50.0|                 1|                  1|\n|Sullivan |                   25.0|                 1|                  1|\n|Juniata  |                   16.7|                 1|                  1|\n|Potter   |                   14.3|                 2|                  1|\n|Wayne    |                    5.9|                 1|                  1|\n\n\n:::\n\n```{.r .cell-code}\nglue::glue(\"Top 5 counties by total vulnerable people living >15 miles from hospitals:\") |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTop 5 counties by total vulnerable people living >15 miles from hospitals:\n```\n\n\n:::\n\n```{.r .cell-code}\ntop5_pop %>% knitr::kable(digits = 0, caption = \"Counties with Most Vulnerable People Far from Hospitals\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Counties with Most Vulnerable People Far from Hospitals\n\n|County   | Vulnerable Pop >15mi| Underserved Tracts| Pct Underserved (%)|\n|:--------|--------------------:|------------------:|-------------------:|\n|Dauphin  |                 4018|                  1|                   1|\n|Forest   |                 2701|                  1|                  50|\n|Crawford |                 2536|                  1|                   4|\n|Potter   |                 1948|                  1|                  14|\n|Wayne    |                 1923|                  1|                   6|\n\n\n:::\n:::\n\n\n\n**Questions to answer:**\n- Which 5 counties have the highest percentage of underserved vulnerable tracts? Forest,Sullivan,Juniata,Potter,Wayne\n- Which counties have the most vulnerable people living far from hospitals? Dauphin\n- Are there any patterns in where underserved counties are located? No, this pattern is not surprising.The underserved counties are predominantly located in northern and central Pennsylvania, which are mountainous, sparsely populated, and rural.\n\n \n\n#### Step 7: Create Summary Table \n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create and format priority counties table\n#   county-level vulnerable metrics (meets the \"Required county-level statistics\")  \ncounty_vuln_metrics <- tracts_in_cnty_num %>%\n  sf::st_drop_geometry() %>%\n  dplyr::group_by(county_name) %>%\n  dplyr::summarise(\n    vuln_tracts            = sum(vulnerable, na.rm = TRUE),\n    underserved_tracts     = sum(underserved, na.rm = TRUE),\n    pct_underserved_vuln   = dplyr::if_else(vuln_tracts > 0,\n                                            100 * underserved_tracts / vuln_tracts,\n                                            NA_real_),\n    vuln_pop_total         = sum(pop_total[vulnerable], na.rm = TRUE),\n    vuln_pop_far           = sum(pop_total[vulnerable & dist_hosp_km > 24.14], na.rm = TRUE), # >15 mi\n    avg_dist_vuln_km       = mean(dist_hosp_km[vulnerable], na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n#   join with existing county-level stats to get county population & min distance  \ncounty_vuln_metrics <- county_vuln_metrics %>%\n  dplyr::left_join(\n    county_stats %>%\n      dplyr::select(county_name, pop_total_sum, min_dist_hosp_km),\n    by = \"county_name\"\n  )\n\n#   priority score (you can tweak weights if needed)  \n# Higher % underserved (among vulnerable), more vulnerable pop far from hospitals, and longer avg distance => higher priority\ncounty_priority <- county_vuln_metrics %>%\n  dplyr::mutate(\n    # Normalize components to [0,1] for a composite index\n    z_pct    = scales::rescale(pct_underserved_vuln, to = c(0, 1), from = range(pct_underserved_vuln, na.rm = TRUE)),\n    z_popfar = scales::rescale(vuln_pop_far,        to = c(0, 1), from = range(vuln_pop_far,        na.rm = TRUE)),\n    z_dist   = scales::rescale(avg_dist_vuln_km,    to = c(0, 1), from = range(avg_dist_vuln_km,    na.rm = TRUE)),\n    priority_score = 0.45 * z_pct + 0.35 * z_popfar + 0.20 * z_dist\n  ) %>%\n  dplyr::arrange(dplyr::desc(priority_score)) %>%\n  dplyr::slice_head(n = 10)\n\n#   pretty formatting for table output  \npriority_table <- county_priority %>%\n  dplyr::transmute(\n    County                        = county_name,\n    `Vulnerable Tracts`           = vuln_tracts,\n    `Underserved Tracts`          = underserved_tracts,\n    `% Underserved (of Vulnerable)` = scales::number(pct_underserved_vuln, accuracy = 0.1),\n    `Avg Distance (mi, Vulnerable)` = scales::number(avg_dist_vuln_km * 0.621371, accuracy = 0.1),\n    `Vulnerable Pop (total)`      = scales::comma(vuln_pop_total),\n    `Vulnerable Pop >15 mi`       = scales::comma(vuln_pop_far),\n    `County Pop (total)`          = scales::comma(pop_total_sum),\n    `Priority Score`              = scales::number(priority_score, accuracy = 0.001)\n  )\n\n#   render professional table  \nknitr::kable(\n  priority_table,\n  caption = \"Top 10 Priority Counties for Healthcare Investment in Pennsylvania (Composite of % underserved among vulnerable tracts, vulnerable population >15 miles from hospitals, and average distance for vulnerable tracts).\"\n)\n```\n\n::: {.cell-output-display}\n\n\nTable: Top 10 Priority Counties for Healthcare Investment in Pennsylvania (Composite of % underserved among vulnerable tracts, vulnerable population >15 miles from hospitals, and average distance for vulnerable tracts).\n\n|County     | Vulnerable Tracts| Underserved Tracts|% Underserved (of Vulnerable) |Avg Distance (mi, Vulnerable) |Vulnerable Pop (total) |Vulnerable Pop >15 mi |County Pop (total) |Priority Score |\n|:----------|-----------------:|------------------:|:-----------------------------|:-----------------------------|:----------------------|:---------------------|:------------------|:--------------|\n|Dauphin    |                 1|                  1|100.0                         |19.2                          |4,018                  |4,018                 |286,108            |0.981          |\n|Forest     |                 1|                  1|100.0                         |18.3                          |2,701                  |2,701                 |6,959              |0.858          |\n|Wayne      |                 1|                  1|100.0                         |15.8                          |1,923                  |1,923                 |51,227             |0.766          |\n|Juniata    |                 1|                  1|100.0                         |16.4                          |1,782                  |1,782                 |23,535             |0.759          |\n|Sullivan   |                 1|                  1|100.0                         |21.2                          |918                    |918                   |5,880              |0.730          |\n|Crawford   |                 3|                  1|33.3                          |10.6                          |6,684                  |2,536                 |83,876             |0.471          |\n|Potter     |                 2|                  1|50.0                          |8.0                           |6,205                  |1,948                 |16,390             |0.469          |\n|Huntingdon |                 1|                  0|0.0                           |13.9                          |2,558                  |0                     |44,123             |0.131          |\n|Warren     |                 1|                  0|0.0                           |13.8                          |1,705                  |0                     |38,492             |0.130          |\n|McKean     |                 1|                  0|0.0                           |10.9                          |1,843                  |0                     |40,459             |0.103          |\n\n\n:::\n:::\n\n\n\n \n## Part 2: Comprehensive Visualization \n\n\n\n \n### Map 1: County-Level Choropleth \n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create county-level access map\n# 1) Prepare county-level choropleth data: % of vulnerable tracts that are underserved\ncounty_choro <- counties %>%\n  dplyr::left_join(\n    county_underserved %>% \n      dplyr::select(county_name, pct_underserved, n_vulnerable, n_underserved),\n    by = c(\"NAME\" = \"county_name\")\n  )\n\n# 2) Ensure hospitals are in the same CRS as counties\nhospitals_plot <- hospitals %>% sf::st_transform(sf::st_crs(counties))\n\n# 3) Map\nggplot() +\n  geom_sf(\n    data = county_choro,\n    aes(fill = pct_underserved),\n    color = \"white\", linewidth = 0.25\n  ) +\n  geom_sf(\n    data = hospitals_plot,\n    color = \"black\", alpha = 0.5, size = 0.6\n  ) +\n  coord_sf() +\n  scale_fill_viridis_c(\n    option = \"magma\",\n    na.value = \"grey90\",\n    labels = scales::label_percent(accuracy = 1, scale = 1),\n    name = \"% Underserved among Vulnerable Tracts\"\n  ) +\n  labs(\n    title = \"Healthcare Access Challenges in Pennsylvania (County Level)\",\n    subtitle = \"Percent of vulnerable census tracts located >15 miles from the nearest hospital; dots show hospital locations\",\n    caption = \"Sources: TIGER/Line (tigris), ACS 5-year (tidycensus), OpenStreetMap (osmdata). Projection: EPSG:5070 (meters).\"\n  ) +\n  theme_void(base_size = 12) +\n  theme(\n    legend.position = \"right\",\n    legend.title = element_text(face = \"bold\"),\n    plot.title = element_text(face = \"bold\"),\n    plot.caption = element_text(color = \"grey30\")\n  )\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n \n\n### Map 2: Detailed Vulnerability Map \n\nCreate a map highlighting underserved vulnerable tracts.\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create detailed tract-level map\n# Ensure common CRS\ncrs_use <- sf::st_crs(counties)\ntracts_plot    <- tracts_attr %>% sf::st_transform(crs_use)\ncounties_plot  <- counties    %>% sf::st_transform(crs_use)\nhospitals_plot <- hospitals   %>% sf::st_transform(crs_use)\n\n# Class for visual hierarchy\ntracts_plot <- tracts_plot %>%\n  dplyr::mutate(\n    vuln_class = dplyr::case_when(\n      underserved ~ \"Underserved vulnerable\",\n      vulnerable  ~ \"Other vulnerable\",\n      TRUE        ~ \"Other tracts\"\n    ),\n    vuln_class = factor(vuln_class,\n                        levels = c(\"Underserved vulnerable\",\"Other vulnerable\",\"Other tracts\"))\n  )\n\nggplot() +\n  # base: all tracts (very light)\n  geom_sf(data = tracts_plot %>% dplyr::filter(vuln_class == \"Other tracts\"),\n          aes(fill = vuln_class), color = NA, alpha = 0.4) +\n  # vulnerable but not underserved (mid emphasis)\n  geom_sf(data = tracts_plot %>% dplyr::filter(vuln_class == \"Other vulnerable\"),\n          aes(fill = vuln_class), color = NA, alpha = 0.7) +\n  # highlight: underserved vulnerable (strong emphasis)\n  geom_sf(data = tracts_plot %>% dplyr::filter(vuln_class == \"Underserved vulnerable\"),\n          aes(fill = vuln_class), color = \"white\", linewidth = 0.1) +\n  # county outlines for context\n  geom_sf(data = sf::st_union(counties_plot), fill = NA, color = \"white\", linewidth = 0.4) +\n  # hospitals as points\n  geom_sf(data = hospitals_plot, color = \"black\", alpha = 0.7, size = 0.6) +\n  coord_sf() +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"Underserved vulnerable\" = \"#C51B7D\",   # magenta/red -> strongest contrast\n               \"Other vulnerable\"       = \"#FDB863\",   # amber\n               \"Other tracts\"           = \"#E6E6E6\")   # light gray\n  ) +\n  labs(\n    title = \"Underserved Vulnerable Tracts in Pennsylvania\",\n    subtitle = \"Tracts meeting low-income & high-elderly criteria and located >15 miles from the nearest hospital\",\n    caption = \"Sources: TIGER/Line (tigris), ACS 5-year (tidycensus), OpenStreetMap (osmdata). Projection: EPSG:5070.\"\n  ) +\n  theme_void(base_size = 12) +\n  theme(\n    legend.position = \"right\",\n    plot.title = element_text(face = \"bold\"),\n    plot.caption = element_text(color = \"grey30\")\n  )\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n \n\n### Chart: Distribution Analysis\n\nCreate a visualization showing the distribution of distances to hospitals for vulnerable populations.\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create distribution visualization\n\n# Ensure distance in miles is available\ntracts_attr <- tracts_attr %>%\n  dplyr::mutate(dist_hosp_miles = dist_hosp_km * 0.621371)\n\n# 1) Histogram (vulnerable tracts only)\np_hist <- tracts_attr %>%\n  dplyr::filter(vulnerable) %>%\n  ggplot(aes(x = dist_hosp_miles)) +\n  geom_histogram(bins = 40, alpha = 0.9) +\n  geom_vline(xintercept = 15, linetype = \"dashed\") +\n  labs(\n    title = \"Distance to Nearest Hospital (Vulnerable Tracts)\",\n    x = \"Distance (miles)\",\n    y = \"Count\",\n    subtitle = \"Dashed line marks 15 miles threshold\",\n    caption = \"Most vulnerable tracts are within 10–15 miles; a long right tail captures rural outliers.\"\n  ) +\n  theme_minimal(base_size = 12)\n\n# 2) Box plot: vulnerable vs. other tracts\np_box <- tracts_attr %>%\n  dplyr::mutate(vuln_flag = dplyr::if_else(vulnerable, \"Vulnerable\", \"Other\")) %>%\n  ggplot(aes(x = vuln_flag, y = dist_hosp_miles)) +\n  geom_boxplot(outlier.alpha = 0.4) +\n  labs(\n    title = \"Distances by Vulnerability Status\",\n    x = NULL,\n    y = \"Distance to nearest hospital (miles)\",\n    caption = \"Vulnerable tracts tend to have slightly longer distances with more extreme outliers.\"\n  ) +\n  theme_minimal(base_size = 12)\n\n# 3) Bar chart: top counties by underserved tracts\n# Use county_underserved if already created; otherwise compute from tracts_in_cnty_num\nif (!exists(\"county_underserved\")) {\n  county_underserved <- tracts_in_cnty_num %>%\n    sf::st_drop_geometry() %>%\n    dplyr::group_by(county_name) %>%\n    dplyr::summarise(\n      n_underserved = sum(underserved, na.rm = TRUE),\n      .groups = \"drop\"\n    ) %>%\n    dplyr::arrange(dplyr::desc(n_underserved))\n}\n\ntop_counties_underserved <- county_underserved %>%\n  dplyr::slice_max(n_underserved, n = 15) %>%\n  dplyr::arrange(n_underserved)\n\np_bar <- ggplot(top_counties_underserved,\n                aes(x = reorder(county_name, n_underserved), y = n_underserved)) +\n  geom_col() +\n  coord_flip() +\n  labs(\n    title = \"Top Counties by Number of Underserved Vulnerable Tracts\",\n    x = NULL,\n    y = \"Underserved vulnerable tracts (count)\",\n    caption = \"Counts highlight clusters of access gaps concentrated in select rural counties.\"\n  ) +\n  theme_minimal(base_size = 12)\n\n# Print plots (you can arrange with patchwork if desired)\np_hist\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_box\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\np_bar\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n\n\n \n## Part 3: Bring Your Own Data Analysis \n\n\n### Analysis\n\n**Your Task:**\n\n1. **Find and load additional data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\n# Load your additional dataset\nhousing_raw <- st_read(\"Affordable_Housing/Affordable_Housing.shp\", quiet = TRUE)\nn_features <- nrow(housing_raw)\ncrs_info <- st_crs(housing_raw)\ncat(\"Number of features:\", n_features, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNumber of features: 443 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Original CRS:\", crs_info$input, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal CRS: WGS 84 / Pseudo-Mercator \n```\n\n\n:::\n\n```{.r .cell-code}\n#Transform CRS to match project CRS (UTM 18N; EPSG:26918)  -\nanalysis_crs <- 26918\nhousing <- st_transform(housing_raw, analysis_crs)\ncat(\"Transformed CRS:\", st_crs(housing)$input, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTransformed CRS: EPSG:26918 \n```\n\n\n:::\n\n```{.r .cell-code}\n#Basic summary statistics  -\nsummary(select(st_drop_geometry(housing), contains(\"YEAR\"), contains(\"STATUS\"), contains(\"ADDRESS\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ADDRESS         \n Length:443        \n Class :character  \n Mode  :character  \n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- What dataset did you choose and why? I selected the Affordable Housing Production dataset because it aligns closely with the healthcare‐equity theme of Assignment 2. It allows me to analyze whether affordable housing projects are spatially located near essential public facilities such as hospitals or transit, providing insight into urban equity and accessibility.\n- What is the data source and date? The dataset comes from OpenDataPhilly, maintained by the Philadelphia Division of Housing and Community Development (DHCD).It contains projects completed since 1994 and was last updated in 2024.\n- How many features does it contain? 443\n- What CRS is it in? Did you need to transform it? WGS 84 / Pseudo-Mercator ,EPSG:26918 \n\n \n\n2. **Pose a research question**\n\nWrite a clear research statement that your analysis will answer.\n\nResearch Question:\n\"Are Philadelphia’s affordable housing developments equitably located relative to hospital access?\"\nRationale:\nAccess to healthcare is a critical component of urban livability, particularly for residents of affordable housing. By examining the spatial relationship between affordable housing projects and hospital service areas, this analysis aims to evaluate whether low-income populations have\nadequate proximity to essential healthcare facilities.\nPolicy Relevance:\nFindings can inform city planning and equitable investment strategies for both housing andhealthcare infrastructure, highlighting neighborhoods where affordable housing expansion should be paired with improved health service accessibility.\n\n \n\n3. **Conduct spatial analysis**\n\n\n**Your Task:**\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your spatial analysis\n# --- Spatial Analysis: Affordable Housing vs. Hospital Access (EPSG:26918) ---\n\n# Load required packages\n\nsuppressPackageStartupMessages({\nlibrary(sf)\nlibrary(dplyr)\nlibrary(units)\nlibrary(ggplot2)\nlibrary(tigris)\nlibrary(osmdata)\nlibrary(janitor)\n})\n\n# Configure tigris options\n\noptions(tigris_use_cache = TRUE, tigris_class = \"sf\")\n\n# Set coordinate reference system (UTM 18N)\n\nanalysis_crs <- 26918\n\n# Load study area boundary (Philadelphia)\n\nphilly <- places(state = \"PA\", cb = TRUE, year = 2023) |>\nfilter(NAME == \"Philadelphia\") |>\nst_transform(analysis_crs)\n\n# Load hospital data: use local shapefile if available; otherwise download from OSM\n\nif (file.exists(\"DOH_Hospitals202311/DOH_Hospitals202311.shp\")) {\nhospitals_pts <- st_read(\"DOH_Hospitals202311/DOH_Hospitals202311.shp\", quiet = TRUE) |>\nst_transform(analysis_crs) |>\nst_intersection(philly)\nhosp_source <- \"Local shapefile (data/Hospitals.shp)\"\n} else {\n\n# Otherwise download from OpenStreetMap\n\nbbox_wgs84 <- st_transform(philly, 4326) |> st_bbox()\nq <- opq(bbox = bbox_wgs84) |>\nadd_osm_feature(key = \"amenity\", value = \"hospital\")\n\nosm <- osmdata_sf(q)\nhosp_pts_osm <- osm$osm_points\nhosp_poly_osm <- osm$osm_polygons\n\n# Convert hospital polygons to centroids\n\nhosp_poly_centroids <- NULL\nif (!is.null(hosp_poly_osm) && nrow(hosp_poly_osm) > 0) {\nhosp_poly_centroids <- st_centroid(st_geometry(hosp_poly_osm)) |>\nst_as_sf() |>\nmutate(osm_id = hosp_poly_osm$osm_id)\n}\n\n# Merge points and centroids\n\nhospitals_pts <- bind_rows(\n(hosp_pts_osm %||% st_sf())[c(\"osm_id\", \"geometry\")],\n(hosp_poly_centroids %||% st_sf())[c(\"osm_id\", \"geometry\")]\n) |>\ndistinct(osm_id, .keep_all = TRUE) |>\nst_transform(analysis_crs) |>\nst_intersection(philly)\n\nhosp_source <- \"OpenStreetMap (amenity=hospital)\"\n}\n\n# Check hospital data\n\nn_hospitals <- nrow(hospitals_pts)\ncat(\"Hospital source:\", hosp_source, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHospital source: Local shapefile (data/Hospitals.shp) \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Hospitals (n):\", n_hospitals, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nHospitals (n): 26 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate distance to the nearest hospital for each housing site\n\nstopifnot(exists(\"housing\"))\ndist_mat <- st_distance(housing, hospitals_pts)\nhousing$dist_hosp_m <- apply(dist_mat, 1, function(x) min(as.numeric(set_units(x, \"m\"))))\n\ncat(\"\\nDistance to nearest hospital (m):\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nDistance to nearest hospital (m):\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary(housing$dist_hosp_m))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  53.74  855.89 1312.20 1533.62 2024.58 6322.51      25 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Share within 1 mile (~1609 m):\",\nround(mean(housing$dist_hosp_m <= 1609, na.rm = TRUE) * 100, 1), \"%\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShare within 1 mile (~1609 m): 63.9 %\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create 1-mile hospital service buffer\n\nservice_radius_m <- 1609\nhosp_service <- st_buffer(hospitals_pts, dist = service_radius_m) |>\nst_union() |>\nst_as_sf() |>\nst_intersection(philly)\n\n# Flag whether each housing project is within service area\n\nhousing$served_1mi <- as.logical(st_intersects(housing, hosp_service, sparse = FALSE))\nhousing$served_1mi[is.na(housing$served_1mi)] <- FALSE\ncat(\"\\nAffordable housing within 1 mile of a hospital:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nAffordable housing within 1 mile of a hospital:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(tabyl(housing$served_1mi) |> adorn_pct_formatting(digits = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n housing$served_1mi   n percent\n              FALSE 176   39.7%\n               TRUE 267   60.3%\n```\n\n\n:::\n\n```{.r .cell-code}\n# Aggregate by census tracts\n\ntracts_phl <- tracts(state = \"PA\", county = \"Philadelphia\", cb = TRUE, year = 2022) |>\nst_transform(analysis_crs) |>\nselect(GEOID, NAME)\n\n# Spatial join housing with tract polygons\n\nhousing_tract <- st_join(housing, tracts_phl, join = st_within, left = TRUE)\n\n# Summarize housing accessibility per tract\n\ntract_summary <- housing_tract |>\nst_drop_geometry() |>\ngroup_by(GEOID, NAME) |>\nsummarize(\nn_projects = n(),\nn_served = sum(served_1mi, na.rm = TRUE),\nn_underserved = sum(!served_1mi, na.rm = TRUE),\npct_served = ifelse(n_projects > 0, n_served / n_projects, NA_real_),\n.groups = \"drop\"\n)\n\n# Join tract-level summary for mapping\n\ntracts_map <- tracts_phl |>\nleft_join(tract_summary, by = c(\"GEOID\", \"NAME\"))\n\ncat(\"\\nTop 10 tracts by number of underserved projects:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTop 10 tracts by number of underserved projects:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(tract_summary |> arrange(desc(n_underserved)) |> head(10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n   GEOID       NAME   n_projects n_served n_underserved pct_served\n   <chr>       <chr>       <int>    <int>         <int>      <dbl>\n 1 <NA>        <NA>           25        0            25      0    \n 2 42101011000 110             8        0             8      0    \n 3 42101015101 151.01          7        0             7      0    \n 4 42101015200 152             7        0             7      0    \n 5 42101015300 153             5        0             5      0    \n 6 42101009300 93              4        0             4      0    \n 7 42101011900 119             4        0             4      0    \n 8 42101014900 149             4        0             4      0    \n 9 42101023700 237             4        0             4      0    \n10 42101003300 33              7        4             3      0.571\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create visualization map\n\np_map <- ggplot() +\ngeom_sf(data = tracts_map, aes(fill = pct_served), linewidth = 0.15, color = \"grey70\") +\nscale_fill_viridis_c(\noption = \"plasma\", na.value = \"grey90\",\nname = \"% served\",\nlabels = scales::percent_format(accuracy = 1),\nlimits = c(0, 1)\n) +\ngeom_sf(data = hosp_service, fill = NA, linewidth = 0.3, linetype = \"dashed\") +\ngeom_sf(data = hospitals_pts, size = 1.2, shape = 21, fill = \"white\", stroke = 0.3) +\ngeom_sf(\ndata = housing,\naes(color = served_1mi),\nsize = 1.3, alpha = 0.85\n) +\nscale_color_manual(\nvalues = c(\"FALSE\" = \"#d7191c\", \"TRUE\" = \"#1a9641\"),\nlabels = c(\"Underserved (>1 mi)\", \"Served (≤1 mi)\"),\nname = \"Housing access\"\n) +\ncoord_sf(datum = NA) +\nlabs(\ntitle = \"Affordable Housing & Hospital Access in Philadelphia\",\nsubtitle = \"Tracts shaded by % of housing projects within 1 mile of a hospital (EPSG:26918)\",\ncaption = paste0(\"Hospitals: \", hosp_source, \" | Housing: Affordable Housing Production\\n\",\n\"Service threshold: 1 mile (~1609 m)\"),\nx = NULL, y = NULL\n) +\ntheme_minimal(base_size = 11) +\ntheme(\nlegend.position = \"right\",\npanel.grid.major = element_line(linewidth = 0.1, color = \"grey90\")\n)\n\np_map\n```\n\n::: {.cell-output-display}\n![](assignment2_Zicheng_Xiang_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Summary statistics\n\nn_total <- nrow(housing)\nn_served <- sum(housing$served_1mi, na.rm = TRUE)\nn_underserved <- sum(!housing$served_1mi, na.rm = TRUE)\nmedian_dist <- median(housing$dist_hosp_m, na.rm = TRUE)\n\ncat(\"\\n=== Key Results ===\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n=== Key Results ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Total housing projects:\", n_total, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTotal housing projects: 443 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Served (<=1 mile):\", n_served, sprintf(\"(%.1f%%)\", 100*n_served/n_total), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nServed (<=1 mile): 267 (60.3%) \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Underserved (>1 mile):\", n_underserved, sprintf(\"(%.1f%%)\", 100*n_underserved/n_total), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnderserved (>1 mile): 176 (39.7%) \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Median distance to nearest hospital:\", round(median_dist), \"m\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMedian distance to nearest hospital: 1312 m\n```\n\n\n:::\n:::\n\n\n\n**interpretation:**\n\nAnalysis shows that 60.3% of Philadelphia's affordable housing projects are located within one mile of a hospital, while 39.7% of the projects remain underserved. The median distance to the nearest hospital is approximately 1.3 kilometers (1,312 meters), indicating that overall spatial accessibility is moderate but unevenly distributed. Underserved areas are concentrated in the northern and southwestern parts of the city, where clusters of affordable housing are located far from major medical institutions. In contrast, the central and southern parts of Philadelphia have higher accessibility due to the dense concentration of hospitals. These findings suggest that future housing investments should prioritize underserved areas to improve healthcare equity across the city.\n\n\n## Finally - A few comments about your incorporation of feedback!\n1.Added brief explanations for outputs.\n2.Personal reference text is not displayed in Markdown.\n3.Hid the setup code block.\n4.Removed the [brackets] from the text.\n\n\n\n\n \n",
    "supporting": [
      "assignment2_Zicheng_Xiang_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}