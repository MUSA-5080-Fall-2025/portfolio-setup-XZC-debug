library(ggplot2)
library(tidycensus)
library(tidyverse)
# Set your Census API key if you haven't already
census_api_key(Sys.getenv("c45ccb372bc48b576b618d3e5e3f1351d741c281"))
# Get some census data for demonstration
demo_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "PA",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Pennsylvania"))
# Basic scatter plot
ggplot(demo_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point()
# Load required packages
library(tidyverse)
library(tidycensus)
library(scales)
library(RColorBrewer)
# Set your Census API key if you haven't already
census_api_key(Sys.getenv("c45ccb372bc48b576b618d3e5e3f1351d741c281"))
# We'll use Pennsylvania data for consistency with previous weeks
state_choice <- "PA"
# Load all available variables for ACS 5-year 2022
acs_vars_2022 <- load_variables(2022, "acs5", cache = TRUE)
# Look at the structure
glimpse(acs_vars_2022)
head(acs_vars_2022)
# Search for population-related variables
population_vars <- acs_vars_2022 %>%
filter(str_detect(label, "Total.*population"))
# Look at the results
head(population_vars, 10)
# Or search in the concept field
pop_concept <- acs_vars_2022 %>%
filter(str_detect(concept, "Total Population"))
head(pop_concept)
# Search for median income
income_vars <- acs_vars_2022 %>%
filter(str_detect(label, "[Mm]edian.*income"))
# Look specifically for household income
household_income <- income_vars %>%
filter(str_detect(label, "household"))
print("Household income variables:")
head(household_income)
# Alternative: search by concept
income_concept <- acs_vars_2022 %>%
filter(str_detect(concept, "Median Household Income"))
head(income_concept)
# Test the variables you found
test_vars <- c(
total_pop = "B01003_001",      # Total population
median_income = "B19013_001",  # Median household income
median_age = "B01002_001"      # Median age
)
# Get data for just one state to test
test_data <- get_acs(
geography = "state",
variables = test_vars,
state = "PA",
year = 2022
)
# Check that you got what you expected
test_data
# Common patterns to remember:
common_variables <- tribble(
~concept, ~typical_code, ~description,
"Total Population", "B01003_001", "Total population",
"Median Age", "B01002_001", "Median age of population",
"Median HH Income", "B19013_001", "Median household income",
"White Population", "B03002_003", "White alone population",
"Black Population", "B03002_004", "Black/African American alone",
"Hispanic Population", "B03002_012", "Hispanic or Latino population",
"Bachelor's Degree", "B15003_022", "Bachelor's degree or higher",
"Median Rent", "B25058_001", "Median contract rent",
"Median Home Value", "B25077_001", "Median value owner-occupied"
)
print("Common Census Variables:")
common_variables
# Get county-level data for your state
county_data <- get_acs(
geography = "county",
variables = c(
total_pop = "B01003_001",       # Total population
median_income = "B19013_001",   # Median household income
median_age = "B01002_001"       # Median age
),
state = state_choice,
year = 2022,
output = "wide"
)
# Clean county names
county_data <- county_data %>%
mutate(county_name = str_remove(NAME, paste0(", ", state_choice)))
# Basic inspection
glimpse(county_data)
# Create histogram of median income
ggplot(county_data) +
aes(x = median_incomeE) +
geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7) +
labs(
title = "Distribution of Median Household Income",
x = "Median Household Income ($)",
y = "Number of Counties"
) +
theme_minimal() +
scale_x_continuous(labels = dollar)
# Create histogram of median income
ggplot(county_data) +
aes(x = median_incomeE) +
geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7) +
labs(
title = "Distribution of Median Household Income",
x = "Median Household Income ($)",
y = "Number of Counties"
) +
theme_minimal() +
scale_x_continuous(labels = dollar)
# Box plot to see outliers clearly
ggplot(county_data) +
aes(y = median_incomeE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Median Income Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Identify the outlier counties
income_outliers <- county_data %>%
mutate(
Q1 = quantile(median_incomeE, 0.25, na.rm = TRUE),
Q3 = quantile(median_incomeE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = median_incomeE < (Q1 - 1.5 * IQR) | median_incomeE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, median_incomeE)
print("Outlier counties:")
income_outliers
# Basic scatter plot
ggplot(county_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point() +
labs(
title = "Population vs Median Income",
x = "Total Population",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Enhanced scatter plot with trend line
ggplot(county_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Population vs Median Income in Pennsylvania Counties",
subtitle = "2018-2022 ACS 5-Year Estimates",
x = "Total Population",
y = "Median Household Income ($)",
caption = "Source: U.S. Census Bureau"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Calculate correlation
correlation <- cor(county_data$total_popE, county_data$median_incomeE, use = "complete.obs")
print(paste("Correlation coefficient:", round(correlation, 3)))
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE) +
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Calculate MOE percentages
county_reliability <- county_data %>%
mutate(
income_moe_pct = (median_incomeM / median_incomeE) * 100,
pop_category = case_when(
total_popE < 50000 ~ "Small (<50K)",
total_popE < 200000 ~ "Medium (50K-200K)",
TRUE ~ "Large (200K+)"
)
)
# MOE by population size
ggplot(county_reliability) +
aes(x = total_popE, y = income_moe_pct) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = 10, color = "red", linetype = "dashed") +
labs(
title = "Data Reliability Decreases with Population Size",
x = "Total Population",
y = "Margin of Error (%)",
caption = "Red line = 10% reliability threshold"
) +
theme_minimal() +
scale_x_continuous(labels = comma)
# Box plots by population category
ggplot(county_reliability) +
aes(x = pop_category, y = income_moe_pct, fill = pop_category) +
geom_boxplot() +
labs(
title = "Data Reliability by County Size Category",
x = "Population Category",
y = "Margin of Error (%)"
) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend since x-axis is clear
# Three-variable scatter plot
ggplot(county_data) +
aes(x = total_popE, y = median_incomeE, color = median_ageE) +
geom_point(size = 2, alpha = 0.7) +
scale_color_viridis_c(name = "Median\nAge") +
labs(
title = "Population, Income, and Age Patterns",
x = "Total Population",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Create age categories and faceted plot
county_faceted <- county_data %>%
mutate(
age_category = case_when(
median_ageE < 40 ~ "Young (< 40)",
median_ageE < 45 ~ "Middle-aged (40-45)",
TRUE ~ "Older (45+)"
)
)
ggplot(county_faceted) +
aes(x = total_popE, y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~age_category) +
labs(
title = "Population-Income Relationship by Age Profile",
x = "Total Population",
y = "Median Income ($)"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Get educational attainment data
education_data <- get_acs(
geography = "county",
variables = c(
total_25plus = "B15003_001",    # Total population 25 years and over
bachelor_plus = "B15003_022"    # Bachelor's degree or higher
),
state = state_choice,
year = 2022,
output = "wide"
) %>%
mutate(
pct_college = (bachelor_plusE / total_25plusE) * 100,
county_name = str_remove(NAME, paste0(", ", state_choice))
) %>%
select(GEOID, county_name, pct_college)
# Check the data
head(education_data)
# Load packages
library(tidycensus)
library(tidyverse)
library(knitr)
#census_api_key("c45ccb372bc48b576b618d3e5e3f1351d741c281", install = TRUE)
my_state <- "Pennsylvania"
# 1.County-Level Resource Assessment
# Data Retrieval
county_data <- get_acs(
geography = "county",
state = my_state,
variables = c(median_income = "B19013_001",
total_pop     = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide"
) %>%
# Clean county names: remove " County, ST"
mutate(NAME = str_remove(NAME, " County,.*"))
# Peek at the data
nrow(county_data)
head(county_data)
# Neighborhood-Level Analysis
# Select Focus Counties
focus_counties <- c("Chester", "Bucks", "Montgomery", "Delaware", "Lancaster", "SomeCounty")  # <-- change these
selected_counties <- county_quality %>%
filter(NAME %in% focus_counties) %>%
select(NAME, median_incomeE, moe_pct, reliability)
# High Uncertainty Counties
top5_uncertainty <- county_quality %>%
arrange(desc(moe_pct)) %>%
slice(1:5) %>%
select(
county = NAME,
median_income = median_incomeE,
income_moe = median_incomeM,
moe_pct,
reliability
)
# Data Quality Assessment
county_quality <- county_data %>%
mutate(
moe_pct = (median_incomeM / median_incomeE) * 100,
reliability = case_when(
moe_pct < 5 ~ "High Confidence",
moe_pct < 10 ~ "Moderate Confidence",
TRUE ~ "Low Confidence"
),
unreliable = moe_pct >= 10  # flag for low confidence
)
reliability_summary <- county_quality %>%
count(reliability) %>%
mutate(percent = round(n / sum(n) * 100, 1))
reliability_summary
# High Uncertainty Counties
top5_uncertainty <- county_quality %>%
arrange(desc(moe_pct)) %>%
slice(1:5) %>%
select(
county = NAME,
median_income = median_incomeE,
income_moe = median_incomeM,
moe_pct,
reliability
)
kable(top5_uncertainty, caption = "Top 5 Counties by Median Income MOE% (Highest First)")
# Neighborhood-Level Analysis
# Select Focus Counties
focus_counties <- c("Chester", "Bucks", "Montgomery", "Delaware", "Lancaster", "SomeCounty")  # <-- change these
selected_counties <- county_quality %>%
filter(NAME %in% focus_counties) %>%
select(NAME, median_incomeE, moe_pct, reliability)
selected_counties
# Tract-Level Demographics
race_vars <- c(
total    = "B03002_001",
white    = "B03002_003",
black    = "B03002_004",
hispanic = "B03002_012"
)
tract_data <- get_acs(
geography = "tract",
state = my_state,
county = selected_counties$NAME,
variables = race_vars,
year = 2022,
survey = "acs5",
output = "wide"
) %>%
mutate(
pct_white    = whiteE    / totalE * 100,
pct_black    = blackE    / totalE * 100,
pct_hispanic = hispanicE / totalE * 100
)
head(tract_data)
# Demographic Analysis
# Highest pct_hispanic tract
highest_hispanic_tract <- tract_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(NAME, GEOID, pct_hispanic, pct_white, pct_black)
highest_hispanic_tract
# County averages
county_avg_demo <- tract_data %>%
group_by(NAME) %>%
summarise(
n_tracts     = n(),
avg_white    = mean(pct_white,    na.rm = TRUE),
avg_black    = mean(pct_black,    na.rm = TRUE),
avg_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
kable(county_avg_demo, caption = "Average Tract Demographics by County")
