NA_real_),
vuln_pop_total         = sum(pop_total[vulnerable], na.rm = TRUE),
vuln_pop_far           = sum(pop_total[vulnerable & dist_hosp_km > 24.14], na.rm = TRUE), # >15 mi
avg_dist_vuln_km       = mean(dist_hosp_km[vulnerable], na.rm = TRUE),
.groups = "drop"
)
#   join with existing county-level stats to get county population & min distance
county_vuln_metrics <- county_vuln_metrics %>%
dplyr::left_join(
county_stats %>%
dplyr::select(county_name, pop_total_sum, min_dist_hosp_km),
by = "county_name"
)
#   priority score (you can tweak weights if needed)
# Higher % underserved (among vulnerable), more vulnerable pop far from hospitals, and longer avg distance => higher priority
county_priority <- county_vuln_metrics %>%
dplyr::mutate(
# Normalize components to [0,1] for a composite index
z_pct    = scales::rescale(pct_underserved_vuln, to = c(0, 1), from = range(pct_underserved_vuln, na.rm = TRUE)),
z_popfar = scales::rescale(vuln_pop_far,        to = c(0, 1), from = range(vuln_pop_far,        na.rm = TRUE)),
z_dist   = scales::rescale(avg_dist_vuln_km,    to = c(0, 1), from = range(avg_dist_vuln_km,    na.rm = TRUE)),
priority_score = 0.45 * z_pct + 0.35 * z_popfar + 0.20 * z_dist
) %>%
dplyr::arrange(dplyr::desc(priority_score)) %>%
dplyr::slice_head(n = 10)
#   pretty formatting for table output
priority_table <- county_priority %>%
dplyr::transmute(
County                        = county_name,
`Vulnerable Tracts`           = vuln_tracts,
`Underserved Tracts`          = underserved_tracts,
`% Underserved (of Vulnerable)` = scales::number(pct_underserved_vuln, accuracy = 0.1),
`Avg Distance (mi, Vulnerable)` = scales::number(avg_dist_vuln_km * 0.621371, accuracy = 0.1),
`Vulnerable Pop (total)`      = scales::comma(vuln_pop_total),
`Vulnerable Pop >15 mi`       = scales::comma(vuln_pop_far),
`County Pop (total)`          = scales::comma(pop_total_sum),
`Priority Score`              = scales::number(priority_score, accuracy = 0.001)
)
#   render professional table
knitr::kable(
priority_table,
caption = "Top 10 Priority Counties for Healthcare Investment in Pennsylvania (Composite of % underserved among vulnerable tracts, vulnerable population >15 miles from hospitals, and average distance for vulnerable tracts)."
)
# Create county-level access map
# 1) Prepare county-level choropleth data: % of vulnerable tracts that are underserved
county_choro <- counties %>%
dplyr::left_join(
county_underserved %>%
dplyr::select(county_name, pct_underserved, n_vulnerable, n_underserved),
by = c("NAME" = "county_name")
)
# 2) Ensure hospitals are in the same CRS as counties
hospitals_plot <- hospitals %>% sf::st_transform(sf::st_crs(counties))
# 3) Map
ggplot() +
geom_sf(
data = county_choro,
aes(fill = pct_underserved),
color = "white", linewidth = 0.25
) +
geom_sf(
data = hospitals_plot,
color = "black", alpha = 0.5, size = 0.6
) +
coord_sf() +
scale_fill_viridis_c(
option = "magma",
na.value = "grey90",
labels = scales::label_percent(accuracy = 1, scale = 1),
name = "% Underserved among Vulnerable Tracts"
) +
labs(
title = "Healthcare Access Challenges in Pennsylvania (County Level)",
subtitle = "Percent of vulnerable census tracts located >15 miles from the nearest hospital; dots show hospital locations",
caption = "Sources: TIGER/Line (tigris), ACS 5-year (tidycensus), OpenStreetMap (osmdata). Projection: EPSG:5070 (meters)."
) +
theme_void(base_size = 12) +
theme(
legend.position = "right",
legend.title = element_text(face = "bold"),
plot.title = element_text(face = "bold"),
plot.caption = element_text(color = "grey30")
)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points %>%
st_transform(5070) %>%
st_intersection(st_union(counties)) %>%
mutate(name = coalesce(name, "Unknown hospital")) %>%
distinct(geometry, .keep_all = TRUE)
glue("Hospitals found (points): {nrow(hospitals)}")
# Save downloaded hospitals to shapefile
if (!dir.exists("data")) dir.create("data")
st_write(hospitals, "data/Hospitals.shp", delete_dsn = TRUE, quiet = TRUE)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points %>%
st_transform(5070) %>%
st_intersection(st_union(counties)) %>%
mutate(name = coalesce(name, "Unknown hospital")) %>%
distinct(geometry, .keep_all = TRUE)
glue("Hospitals found (points): {nrow(hospitals)}")
# Sanitize invalid column names for shapefile format
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# Save downloaded hospitals to shapefile
if (!dir.exists("data")) dir.create("data")
st_write(hospitals, "data/Hospitals.shp", delete_dsn = TRUE, quiet = TRUE)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points %>%
st_transform(5070) %>%
st_intersection(st_union(counties)) %>%
mutate(name = coalesce(name, "Unknown hospital")) %>%
distinct(geometry, .keep_all = TRUE)
glue("Hospitals found (points): {nrow(hospitals)}")
# Clean field names for shapefile
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# Ensure 'data' folder exists
if (!dir.exists("data")) dir.create("data", recursive = TRUE)
# Write shapefile
st_write(hospitals, "data/Hospitals.shp", delete_dsn = TRUE, quiet = TRUE)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points %>%
st_transform(5070) %>%
st_intersection(st_union(counties)) %>%
mutate(name = coalesce(name, "Unknown hospital")) %>%
distinct(geometry, .keep_all = TRUE)
glue("Hospitals found (points): {nrow(hospitals)}")
# Clean field names for shapefile
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# Ensure 'data' folder exists
if (!dir.exists("data")) dir.create("data", recursive = TRUE)
# Write shapefile
# CORRECTION: Set dsn to the directory ("data") and layer to the file name ("Hospitals").
st_write(
hospitals,
dsn = "data",
layer = "Hospitals",
delete_dsn = TRUE,
quiet = TRUE
)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
# Transform to appropriate projected CRS
pa_bbox <- st_transform(counties, 4326) %>% st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) %>%
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points %>%
st_transform(5070) %>%
st_intersection(st_union(counties)) %>%
mutate(name = coalesce(name, "Unknown hospital")) %>%
distinct(geometry, .keep_all = TRUE)
glue("Hospitals found (points): {nrow(hospitals)}")
# 清理字段名（保持不变）
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# 确保 'data' 文件夹存在（保持不变）
if (!dir.exists("data")) dir.create("data", recursive = TRUE)
# 写入 Shapefile：使用 delete_layer = TRUE 覆盖现有文件
st_write(
hospitals,
dsn = "data",
layer = "Hospitals",
delete_layer = TRUE, # <--- 将 delete_dsn 改为 delete_layer
quiet = TRUE
)
#| echo: true
#  - Step 1: Packages & global params  -
required_pkgs <- c(
"tidyverse","sf","tigris","tidycensus","units","nngeo",
"ggplot2","scales","janitor","glue","patchwork","osmdata"
)
for (p in required_pkgs) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
options(tigris_use_cache = TRUE, tigris_class = "sf")
#  - define BEFORE any use  -
state_abbr <- "PA"
state_name <- "Pennsylvania"
year_acs   <- 2022
survey     <- "acs5"
# tidycensus::census_api_key("YOUR_KEY_HERE", install = TRUE, overwrite = TRUE)
#  - geometries (use EPSG:5070 for distance in meters)  -
counties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>
sf::st_as_sf() |> sf::st_transform(5070)
tracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>
sf::st_as_sf() |> sf::st_transform(5070)
#  - hospitals from OSM within PA bbox  -
pa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) |>
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
#| echo: true
#  - Step 1: Packages & global params  -
required_pkgs <- c(
"tidyverse","sf","tigris","tidycensus","units","nngeo",
"ggplot2","scales","janitor","glue","patchwork","osmdata"
)
for (p in required_pkgs) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
options(tigris_use_cache = TRUE, tigris_class = "sf")
#  - define BEFORE any use  -
state_abbr <- "PA"
state_name <- "Pennsylvania"
year_acs   <- 2022
survey     <- "acs5"
# tidycensus::census_api_key("YOUR_KEY_HERE", install = TRUE, overwrite = TRUE)
#  - geometries (use EPSG:5070 for distance in meters)  -
counties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>
sf::st_as_sf() |> sf::st_transform(5070)
tracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>
sf::st_as_sf() |> sf::st_transform(5070)
#  - hospitals from OSM within PA bbox  -
pa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) |>
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points |>
sf::st_transform(5070) |>
sf::st_intersection(sf::st_union(counties)) |>
dplyr::mutate(name = dplyr::coalesce(name, "Unknown hospital")) |>
dplyr::distinct(geometry, .keep_all = TRUE)
# 清理字段名（保持不变）
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# 确保 'data' 文件夹存在（保持不变）
if (!dir.exists("data")) dir.create("data", recursive = TRUE)
# 写入 Shapefile：使用 delete_layer = TRUE 覆盖现有文件
st_write(
hospitals,
dsn = "data",
layer = "Hospitals",
delete_layer = TRUE, # <--- 将 delete_dsn 改为 delete_layer
quiet = TRUE
)
#| echo: true
#  - Step 1: Packages & global params  -
required_pkgs <- c(
"tidyverse","sf","tigris","tidycensus","units","nngeo",
"ggplot2","scales","janitor","glue","patchwork","osmdata"
)
for (p in required_pkgs) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
options(tigris_use_cache = TRUE, tigris_class = "sf")
#  - define BEFORE any use  -
state_abbr <- "PA"
state_name <- "Pennsylvania"
year_acs   <- 2022
survey     <- "acs5"
# tidycensus::census_api_key("YOUR_KEY_HERE", install = TRUE, overwrite = TRUE)
#  - geometries (use EPSG:5070 for distance in meters)  -
counties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>
sf::st_as_sf() |> sf::st_transform(5070)
tracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>
sf::st_as_sf() |> sf::st_transform(5070)
#  - hospitals from OSM within PA bbox  -
pa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) |>
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
#| echo: true
#  - Step 1: Packages & global params  -
required_pkgs <- c(
"tidyverse","sf","tigris","tidycensus","units","nngeo",
"ggplot2","scales","janitor","glue","patchwork","osmdata"
)
for (p in required_pkgs) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
options(tigris_use_cache = TRUE, tigris_class = "sf")
#  - define BEFORE any use  -
state_abbr <- "PA"
state_name <- "Pennsylvania"
year_acs   <- 2022
survey     <- "acs5"
# tidycensus::census_api_key("YOUR_KEY_HERE", install = TRUE, overwrite = TRUE)
#  - geometries (use EPSG:5070 for distance in meters)  -
counties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>
sf::st_as_sf() |> sf::st_transform(5070)
tracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>
sf::st_as_sf() |> sf::st_transform(5070)
#  - hospitals from OSM within PA bbox  -
pa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) |>
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
hospitals <- osm_h$osm_points |>
sf::st_transform(5070) |>
sf::st_intersection(sf::st_union(counties)) |>
dplyr::mutate(name = dplyr::coalesce(name, "Unknown hospital")) |>
dplyr::distinct(geometry, .keep_all = TRUE)
# 清理字段名（保持不变）
names(hospitals) <- gsub("[^A-Za-z0-9_]", "_", names(hospitals))
# 确保 'data' 文件夹存在（保持不变）
if (!dir.exists("data")) dir.create("data", recursive = TRUE)
# 写入 Shapefile：明确指定驱动程序
st_write(
hospitals,
dsn = "data",
layer = "Hospitals",
driver = "ESRI Shapefile", # <--- 明确指定驱动程序
delete_layer = TRUE,
quiet = TRUE
)
library(sf)
library(dplyr)
# Load your additional dataset
housing_raw <- st_read("Affordable_Housing/Affordable_Housing.shp", quiet = TRUE)
n_features <- nrow(housing_raw)
crs_info <- st_crs(housing_raw)
cat("Number of features:", n_features, "\n")
cat("Original CRS:", crs_info$input, "\n")
#Transform CRS to match project CRS (UTM 18N; EPSG:26918)  -
analysis_crs <- 26918
housing <- st_transform(housing_raw, analysis_crs)
cat("Transformed CRS:", st_crs(housing)$input, "\n")
#Basic summary statistics  -
summary(select(st_drop_geometry(housing), contains("YEAR"), contains("STATUS"), contains("ADDRESS")))
# Your spatial analysis
# --- Spatial Analysis: Affordable Housing vs. Hospital Access (EPSG:26918) ---
# Load required packages
suppressPackageStartupMessages({
library(sf)
library(dplyr)
library(units)
library(ggplot2)
library(tigris)
library(osmdata)
library(janitor)
})
# Configure tigris options
options(tigris_use_cache = TRUE, tigris_class = "sf")
# Set coordinate reference system (UTM 18N)
analysis_crs <- 26918
# Load study area boundary (Philadelphia)
philly <- places(state = "PA", cb = TRUE, year = 2023) |>
filter(NAME == "Philadelphia") |>
st_transform(analysis_crs)
# Load hospital data: use local shapefile if available; otherwise download from OSM
if (file.exists("DOH_Hospitals202311/DOH_Hospitals202311.shp")) {
hospitals_pts <- st_read("DOH_Hospitals202311/DOH_Hospitals202311.shp", quiet = TRUE) |>
st_transform(analysis_crs) |>
st_intersection(philly)
hosp_source <- "Local shapefile (data/Hospitals.shp)"
} else {
# Otherwise download from OpenStreetMap
bbox_wgs84 <- st_transform(philly, 4326) |> st_bbox()
q <- opq(bbox = bbox_wgs84) |>
add_osm_feature(key = "amenity", value = "hospital")
osm <- osmdata_sf(q)
hosp_pts_osm <- osm$osm_points
hosp_poly_osm <- osm$osm_polygons
# Convert hospital polygons to centroids
hosp_poly_centroids <- NULL
if (!is.null(hosp_poly_osm) && nrow(hosp_poly_osm) > 0) {
hosp_poly_centroids <- st_centroid(st_geometry(hosp_poly_osm)) |>
st_as_sf() |>
mutate(osm_id = hosp_poly_osm$osm_id)
}
# Merge points and centroids
hospitals_pts <- bind_rows(
(hosp_pts_osm %||% st_sf())[c("osm_id", "geometry")],
(hosp_poly_centroids %||% st_sf())[c("osm_id", "geometry")]
) |>
distinct(osm_id, .keep_all = TRUE) |>
st_transform(analysis_crs) |>
st_intersection(philly)
hosp_source <- "OpenStreetMap (amenity=hospital)"
}
# Check hospital data
n_hospitals <- nrow(hospitals_pts)
cat("Hospital source:", hosp_source, "\n")
cat("Hospitals (n):", n_hospitals, "\n")
# Calculate distance to the nearest hospital for each housing site
stopifnot(exists("housing"))
dist_mat <- st_distance(housing, hospitals_pts)
housing$dist_hosp_m <- apply(dist_mat, 1, function(x) min(as.numeric(set_units(x, "m"))))
cat("\nDistance to nearest hospital (m):\n")
print(summary(housing$dist_hosp_m))
cat("Share within 1 mile (~1609 m):",
round(mean(housing$dist_hosp_m <= 1609, na.rm = TRUE) * 100, 1), "%\n")
# Create 1-mile hospital service buffer
service_radius_m <- 1609
hosp_service <- st_buffer(hospitals_pts, dist = service_radius_m) |>
st_union() |>
st_as_sf() |>
st_intersection(philly)
# Flag whether each housing project is within service area
housing$served_1mi <- as.logical(st_intersects(housing, hosp_service, sparse = FALSE))
housing$served_1mi[is.na(housing$served_1mi)] <- FALSE
cat("\nAffordable housing within 1 mile of a hospital:\n")
print(tabyl(housing$served_1mi) |> adorn_pct_formatting(digits = 1))
# Aggregate by census tracts
tracts_phl <- tracts(state = "PA", county = "Philadelphia", cb = TRUE, year = 2022) |>
st_transform(analysis_crs) |>
select(GEOID, NAME)
# Spatial join housing with tract polygons
housing_tract <- st_join(housing, tracts_phl, join = st_within, left = TRUE)
# Summarize housing accessibility per tract
tract_summary <- housing_tract |>
st_drop_geometry() |>
group_by(GEOID, NAME) |>
summarize(
n_projects = n(),
n_served = sum(served_1mi, na.rm = TRUE),
n_underserved = sum(!served_1mi, na.rm = TRUE),
pct_served = ifelse(n_projects > 0, n_served / n_projects, NA_real_),
.groups = "drop"
)
# Join tract-level summary for mapping
tracts_map <- tracts_phl |>
left_join(tract_summary, by = c("GEOID", "NAME"))
cat("\nTop 10 tracts by number of underserved projects:\n")
print(tract_summary |> arrange(desc(n_underserved)) |> head(10))
# Create visualization map
p_map <- ggplot() +
geom_sf(data = tracts_map, aes(fill = pct_served), linewidth = 0.15, color = "grey70") +
scale_fill_viridis_c(
option = "plasma", na.value = "grey90",
name = "% served",
labels = scales::percent_format(accuracy = 1),
limits = c(0, 1)
) +
geom_sf(data = hosp_service, fill = NA, linewidth = 0.3, linetype = "dashed") +
geom_sf(data = hospitals_pts, size = 1.2, shape = 21, fill = "white", stroke = 0.3) +
geom_sf(
data = housing,
aes(color = served_1mi),
size = 1.3, alpha = 0.85
) +
scale_color_manual(
values = c("FALSE" = "#d7191c", "TRUE" = "#1a9641"),
labels = c("Underserved (>1 mi)", "Served (≤1 mi)"),
name = "Housing access"
) +
coord_sf(datum = NA) +
labs(
title = "Affordable Housing & Hospital Access in Philadelphia",
subtitle = "Tracts shaded by % of housing projects within 1 mile of a hospital (EPSG:26918)",
caption = paste0("Hospitals: ", hosp_source, " | Housing: Affordable Housing Production\n",
"Service threshold: 1 mile (~1609 m)"),
x = NULL, y = NULL
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "right",
panel.grid.major = element_line(linewidth = 0.1, color = "grey90")
)
p_map
# Summary statistics
n_total <- nrow(housing)
n_served <- sum(housing$served_1mi, na.rm = TRUE)
n_underserved <- sum(!housing$served_1mi, na.rm = TRUE)
median_dist <- median(housing$dist_hosp_m, na.rm = TRUE)
cat("\n=== Key Results ===\n")
cat("Total housing projects:", n_total, "\n")
cat("Served (<=1 mile):", n_served, sprintf("(%.1f%%)", 100*n_served/n_total), "\n")
cat("Underserved (>1 mile):", n_underserved, sprintf("(%.1f%%)", 100*n_underserved/n_total), "\n")
cat("Median distance to nearest hospital:", round(median_dist), "m\n")
#| echo: true
#  - Step 1: Packages & global params  -
required_pkgs <- c(
"tidyverse","sf","tigris","tidycensus","units","nngeo",
"ggplot2","scales","janitor","glue","patchwork","osmdata"
)
for (p in required_pkgs) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
options(tigris_use_cache = TRUE, tigris_class = "sf")
#  - define BEFORE any use  -
state_abbr <- "PA"
state_name <- "Pennsylvania"
year_acs   <- 2022
survey     <- "acs5"
# tidycensus::census_api_key("YOUR_KEY_HERE", install = TRUE, overwrite = TRUE)
#  - geometries (use EPSG:5070 for distance in meters)  -
counties <- tigris::counties(state = state_abbr, cb = TRUE, year = 2022) |>
sf::st_as_sf() |> sf::st_transform(5070)
tracts <- tigris::tracts(state = state_abbr, year = 2022, cb = TRUE) |>
sf::st_as_sf() |> sf::st_transform(5070)
#  - hospitals from OSM within PA bbox  -
pa_bbox <- sf::st_transform(counties, 4326) |> sf::st_bbox()
q <- opq(bbox = c(pa_bbox["xmin"], pa_bbox["ymin"], pa_bbox["xmax"], pa_bbox["ymax"])) |>
add_osm_feature(key = "amenity", value = "hospital")
osm_h <- osmdata_sf(q)
